Bernardo SabatiniUsing the intrinsic electrophysiological properties analysis program (i.e. for I/V and I/F curves in current clamp)Step 1Create an excel spreadsheet that has the following columns.  The first row should have the column names in it and each subsequent row should have the relevant data for 1 cell.  See sampleTable.xlsx for an example.  The order of the columns is irrelevant.1. Folder - This is the name of the folder in which the data for a group of cells are stored.  There is likely one folder per acquisition session.  All of these folders should be contained in one folder for batch processing2. mouseID Ð This is a user set field that is used as a label for the processed data3. cellID Ð This is a user set field that is combined with the mouseID to label the data for a each cell4. SweepStart Ð First acquisition number to process for the cell5. SweepEnd Ð The last acquisition number to process for the cell6. (Optional) CurrentPulse Ð A list of the current pulse amplitudes used for each cycle position. (see below for various options).  If, for example, cycle positions 1, 2, and 3 correspond to amplitudes of -100, 0, and 100 pA, enter Ô-100, 0, 100Õ in this field.  Copy it down for all the cells acquired with the same cycle definition.7. (Optional) Ð Any other columns containing relevant data can be added.  These will be passed through to the final data analysis object for future use.  They can be used to stored location of cells, genetic identity of cells, drugs applied, or anything else.Step 2Run phLoadFromExcel1. Select the folder that contains all of the data folders listed in the ÔFolderÕ column of the spreadsheet 2. Select the folder in which the output files will be stored. If the user does not want to save the output files, press ÔCancelÕThis function makes and sets a bunch of global variables called csTableNum csTableTxt csTableRaw csTableSize.These store the numeric (csTableNum), text (csTableTxt), and all (csTableRaw) content of the spreadsheet.  csTableSize is set to [number_of_columns number_of_cells]Step 3Run phAnalyzeIntrinsicProperties(cellList, (optional_param, optional_param_value)*)cellList is a numeric array of the indices of the cells to analyze.  If set to [], all cells are analyzed.  E.g. [1:5] to analyze the first 5 cells, 13 to analyze cell 13, [1 7 11] to analyze cells 1, 7, and 11 in the table.  Since the table was a header row the cell 13, for example, would be found in row 14 of csTableRaw and the original excel spreadsheet.optional_param, optional_param_value are pairs of parameters and values.  These are analyzed in eval statements and can be used to over ride any parameters used by the code.  Some that are often used are (with defaults):       pulseAmplitudeMode=1 % see code line 55 for explanation of this parameter    	pulseStart=1500 % when the variable current pulse starts (in ms)    	pulseEnd=2500 % when the variable current pulse ends  (in ms)    	checkPulseSize=-50 % the amplitude of the standard RC check pulse (in pA)    	checkPulseStart=200 % when the standard RC pulse check starts and ends    	checkPulseEnd=500       maxRestSD=5; % max SD of the resting voltage to pass QC    	minRm=50; % min Rm to pass QC    	maxRm=1000; % max Rm to pass QC        	maxVm=-50; % max Vm for inclusion and to pass QC    	minVm=-90; % min Vm for inclusion and to pass QC       E.g.phAnalyzeIntrinsicProperties(1:10)% analyze cells 1-10phAnalyzeIntrinsicProperties([1 10 12], ÔpulseAmplitudeModeÕ, 2)% analyze cells 1, 10, and 12 and set pulseAmplitudeMode=2phAnalyzeIntrinsicProperties([], ÔpulseAmplitudeModeÕ, 2, ÔmaxRestSDÔ, 3)% analyze all cells and set pulseAmplitudeMode=2 and put a limit of 3 mv standard % deviation of the resting potential for traces to pass quality controlAs each cell is analyzed the results f are stored in newCell and save to disk in a .mat file with the name ÔmouseID_cellID.matÕFor each cell, a summary page is plotted and this is saved as a PDF with the name ÔmouseID_cellID.pdfÕThe data for each cell is also stored in the structure array csAllCells with csAllCells(1) corresponding to the results for cell 1, etcÉnewCell.acq{trace#) (equivalently csAllCells(celL#).acq{trace#}) has the raw data object in it whereas the other fields are either numeric arrays with results of analysis, optional columns carried through from the excel table (gray in example below), or action potential analysis structures.
% Examples of data structures>> newCellnewCell =                  Folder: 20160415                mouseID: 'SP8'                 cellID: 1                    Rin: 650                     Cm: 18             SweepStart: 1               SweepEnd: 40                     ML: 128                     DV: 111                    amp: 0              Injection: 'C'                  Notes: NaN           CurrentPulse: '-100, -75, -50, -25, 10, 20, 30, 40, 50, 60, 70, 80, 90,É'         CurrentPulseID: 1                     QC: 1                acqRate: 10              firstOnly: 1                    acq: {1x40 cell}                 acqNum: [1x40 double]              cycleName: {1x40 cell}          cyclePosition: [1x40 double]           pulsePattern: [1x40 double]              extraGain: [1x40 double]              pulseList: [1x17 double]         pulseListFirst: [17x2 double]               restMode: [1x40 double]               restMean: [1x40 double]                restMax: [1x40 double]                restMin: [1x40 double]                 restSD: [1x40 double]                pulseRm: [1x40 double]                 pulseV: [1x40 double]                    nAP: [1x40 double]                traceQC: [1x40 logical]                   sagV: [1x40 double]               reboundV: [1x40 double]              reboundAP: [1x40 double]               pulseAHP: [1x40 double]                 postAP: {1x40 cell}                pulseAP: {1x40 cell}         checkPulseRend: [1x40 double]        checkPulseRpeak: [1x40 double]          checkPulseTau: [1x40 double]                 pulseI: [1x40 double]             restMedian: [1x40 double]    checkPulseRpeakMean: 578.1116     checkPulseRendMean: 561.2954      checkPulseTauMean: 31.6586>> round(newCell.restMedian(1:10)) % resting potential for first 10 trialsans =   -58   -59   -59   -60   -59   -61   -58   -61   -61   -62>> newCell.pulseI(1:10) % the current amplitudes of the first 10 pulsesans =  -100   -75   -50   -25    10    20    30    40    50    60>> newCell.pulseV(1:10) % the plateau potential reached in the first 10 pulsesans =   NaN   -98   -90   -79   -49   -46   -38   -35   -45   -35NOTE Ð the first pulseV entry has a value of NAN because that trace failed QC>> newCell.nAP(1:10) % numbers of action potentials in the first 10 pulsesans =   NaN     0     0     0     0     0     0     5     9    11>> newCell.pulseAP{10} % Get the AP parameters for trial 10 (in which there were 11 APs)ans =                nAP: 11         AP_peak_V: [1x11 double]      AP_peak_time: [1x11 double]          AP_AHP_V: [1x11 double]       AP_thresh_V: [1x11 double]    AP_thresh_time: [1x11 double]           AP_HW_V: [1x11 double]             AP_0W: [1x11 double]             AP_HW: [1x11 double]       AP_max_dVdT: [1x11 double]>> round(newCell.pulseAP{10}.AP_peak_V) % rounded peak voltage of all the APs in trial 10ans =    21    22    19    22    22    21    22    21    23    23    14>> newCell.pulseAP{10}.AP_HW % Half width (at voltage midway from threshold to peak)ans =  Columns 1 through 8 (% omitted last 3 here for brevity)    0.5810    0.5640    0.5828    0.5673    0.5817    0.5850    0.5683    0.5901>> newCell.pulseAP{10}.AP_0W % Width at 0 mVans =  Columns 1 through 8 (% omitted last 3 here for brevity)    0.5679    0.5662    0.5613    0.5666    0.5738    0.5777    0.5717    0.5723 